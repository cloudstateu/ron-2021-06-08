# [CI]
steps:
# Uruchomienie testów jednostkowych.
- name: 'python:3.7-slim'
  id: Test
  entrypoint: /bin/sh
  args:
  - -c
  - 'pip install flask && python web_app_tests.py -v'

# Zbudowanie obrazu kontenera.
- name: 'gcr.io/cloud-builders/docker'
  id: Build
  args:
  - 'build'
  - '-t'
  - 'gcr.io/$PROJECT_ID/kube-cicd:$SHORT_SHA'
  - '.'

# Push obrazu do Container Registry
# PROJECT_ID i SHORT_SHA są podmieniane przez Cloud Build.
- name: 'gcr.io/cloud-builders/docker'
  id: Push
  args:
  - 'push'
  - 'gcr.io/$PROJECT_ID/kube-cicd:$SHORT_SHA'
# [CI]

# [CD]
# Sklonowanie repozytorium kube-test-env z branch candidate.
- name: 'gcr.io/cloud-builders/gcloud'
  id: Clone env repository
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    gcloud source repos clone kube-test-env && \
    cd kube-test-env && \
    git checkout candidate && \
    git config user.email $(gcloud auth list --filter=status:ACTIVE --format='value(account)')

# Wygenerowanie nowego pliku manifest - do deploymentu na Kubernetes Engine.
- name: 'gcr.io/cloud-builders/gcloud'
  id: Generate manifest
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
     sed "s/GOOGLE_CLOUD_PROJECT/${PROJECT_ID}/g" kubernetes.yaml.tpl | \
     sed "s/COMMIT_SHA/${SHORT_SHA}/g" > kube-test-env/kubernetes.yaml

# Commit pliku manifest do kube-test-env, branch candidate.
- name: 'gcr.io/cloud-builders/gcloud'
  id: Push manifest
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    set -x && \
    cd kube-test-env && \
    git add kubernetes.yaml && \
    git commit -m "Deploying image gcr.io/${PROJECT_ID}/kube-cicd:${SHORT_SHA}
    Built from commit ${COMMIT_SHA} of repository kube-web-app
    Author: $(git log --format='%an <%ae>' -n 1 HEAD)" && \
    git push origin candidate
# [CD]